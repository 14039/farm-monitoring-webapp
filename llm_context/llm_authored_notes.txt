Frontend initialized with Vite + React + TS inside `farm_monitor_fe`.
Added MUI v6 for UI and Leaflet for maps. App shell renders two components per design: `SideNav` (rounded button top-left that toggles a dropdown with three placeholder actions) and `MapCanvas` (Leaflet map centered at 44°50′24″N, 122°46′22″W). Global CSS ensures full-viewport sizing and Leaflet container fills parent. Theme uses default `createTheme()` for now.
Run: `cd farm_monitor_fe && pnpm install && pnpm dev` (or npm/yarn equivalents).

Component details:
- `SideNav`: Top-left primary `Button` labeled “Sublime Organics” with logo (from `/public/logo.avif`) shown via `startIcon`. Button width is responsive: `{ xs: 70vw, sm: 40vw, md: 24vw, lg: 20vw }`. Clicking toggles a dropdown (`Paper`) with three placeholder buttons. Dropdown height `calc(100vh - 88px)`.
- `MapCanvas`: `react-leaflet` `MapContainer` + OSM `TileLayer`; map fills parent; center derived from DMS to decimal conversion.
- `MapCanvas`: switched to satellite imagery using Google tiles (`lyrs=s`, subdomains mt0-3, maxZoom 20). Map fills parent; center derived from DMS to decimal conversion.
- Logo: placed at `public/logo.avif` (copied from user-supplied `PNGSublimeLogoHighQuality.avif`). Referenced by SideNav via `/logo.avif`.
- Global CSS: `html, body, #root` 100% w/h; `.leaflet-container` 100% w/h.
Map UX:
- Leaflet zoom control hidden (`zoomControl={false}` on `MapContainer` plus CSS `.leaflet-control-zoom { display:none }`). Zoom via pinch/scroll only. Default zoom increased to 17 for closer satellite view.

Backend API (Postgres-backed):
- FastAPI server in `backend/server.py` with CORS for Vite dev origin.
- `GET /api/sensors` queries Postgres (no JSON fallback). Data model matches `sensor` table.
- Python deps listed in `backend/requirements.txt` (fastapi, uvicorn, psycopg, psycopg-pool).

Frontend integration:
- `MapCanvas.tsx` fetches sensors from backend only (no local fallback), on mount.
- Base URL configurable via `VITE_API_BASE_URL` (defaults to `http://127.0.0.1:8000`).
- Sensors rendered as `CircleMarker` with popup showing name/type/id.

Run instructions (quick):
1) Backend
   - `cd backend`
   - `python -m venv .venv && source .venv/bin/activate`
   - `pip install -r requirements.txt`
   - `uvicorn backend.server:app --reload --port 8001`
2) Frontend
   - `cd frontend`
   - `npm install`
   - `VITE_API_BASE_URL=http://127.0.0.1:8001 npm run dev`


Database and backend integration (updated):
- Schema is consolidated into a single root file `schema.sql` (psql-friendly and idempotent).
  - Usage: `psql "$DATABASE_URL" -f schema.sql`
  - Includes: `\set ON_ERROR_STOP on`, `set timezone to 'UTC'`, `create extension if not exists pgcrypto`.
  - Tables: `sensor(hardware_id, name, sensor_type, gps_latitude, gps_longitude, metadata)` and `reading(...)`.
  - Indexes: `idx_reading_sensor_ts_desc` on `(sensor_id, ts desc)`.
  - `image_asset` table and its index are present but commented out for now.

- Data ingestion: `backend/db_ingest_data.py` imports `llm_context/data_log_sample.csv` into the DB.
  - Requires `DATABASE_URL` (example: `postgresql://postgres:<pw>@127.0.0.1:8122/postgres`).
  - Deterministic `hardware_id` via CRC32 of CSV "TX ID"; upserts `sensor` on `hardware_id`.
  - Inserts `reading` in batches with `on conflict (sensor_id, ts) do nothing`.
  - CSV-specific fields mapped: `temperature_c`, `humidity_pct`, `battery_v`, `rssi_dbm`; `capacitance_val` is `NULL` for this dataset.
  - Defaults: `--sensor-type` (default `temperature`), `--default-lat`, `--default-lon` applied per new sensor.

- Backend API now reads from Postgres instead of JSON.
  - File: `backend/server.py`.
  - Uses `psycopg_pool.ConnectionPool` with simple FastAPI `startup`/`shutdown` handlers.
  - Endpoint: `GET /api/sensors` selects `hardware_id, name, sensor_type, gps_latitude, gps_longitude, coalesce(metadata,'{}'::jsonb)` from `sensor` ordered by `hardware_id`.
  - CORS allows any localhost port for Vite dev.
  - Note: `DATABASE_URL` must be set for the API to start.

- Frontend integration with API.
  - `frontend/src/components/MapCanvas.tsx` fetches from `VITE_API_BASE_URL` or defaults to `http://127.0.0.1:8000`.
  - If backend runs on a different port (e.g., 8001), set `VITE_API_BASE_URL=http://127.0.0.1:8001` (env or `.env.local`).
  - CORS on the backend is already configured to accept any localhost port.

- Quick runbook (local):
  1) Create schema: `psql -f schema.sql` (ensure `PGHOST/PGPORT/PGUSER/PGPASSWORD/PGDATABASE` or `DATABASE_URL` are set).
  2) Ingest data: `export DATABASE_URL='postgresql://postgres:<pw>@127.0.0.1:8122/postgres' && python backend/db_ingest_data.py --csv llm_context/data_log_sample.csv`.
  3) Start backend: `pip install -r backend/requirements.txt && uvicorn backend.server:app --reload --port 8001` (or 8000 if available).
  4) Start frontend: `cd frontend && npm install && VITE_API_BASE_URL=http://127.0.0.1:<api_port> npm run dev`.

- Troubleshooting notes:
  - If `uvicorn` reports "Address already in use", free the port: `lsof -nP -iTCP:8000 -sTCP:LISTEN -t | xargs kill` or change `--port`.
  - If frontend logs `ERR_CONNECTION_TIMED_OUT` to `127.0.0.1:8000/api/sensors`, verify `VITE_API_BASE_URL` matches the backend port.
  - The server prints a startup DB connectivity message and the count of sensors fetched on `/api/sensors` for quick verification during development.
